generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// ENUM Values
enum RoleEnum {
    admin
    member
}

enum TypeEnum {
    normal
    group
}

enum MessageTypeEnum {
    text
    image
    video
    audio
    file
}

enum MessageStatusEnum {
    sent
    delivered
    read
}

model User {
    id               Int                        @id @default(autoincrement())
    name             String                     @db.VarChar(191)
    image            String?
    phone            String                     @unique
    password         String
    created_at       DateTime                   @default(now())
    updated_at       DateTime                   @default(now())
    last_seen        DateTime?                  @default(now())
    about            String?                    @default("")
    verificationId   Int                        @unique
    twoFAId          Int?                       @unique
    verification     Verification?              @relation(fields: [verificationId], references: [id])
    twoFA            TwoFA?                     @relation(fields: [twoFAId], references: [id])
    conversation     Conversation[]
    UserParticipants ConversationParticipants[] @relation("UserParticipant")
    CreatedBy        ConversationParticipants[] @relation("CreatedBy")

    @@map("users")
}

model Verification {
    id     Int     @id @default(autoincrement())
    otp    Int
    status Boolean @default(false)
    user   User?
}

model TwoFA {
    id     Int     @id @default(autoincrement())
    status Boolean @default(false)
    user   User?
}

model Conversation {
    id           Int                        @id @default(autoincrement())
    name         String?
    description  String?
    created_by   Int
    avatar       String?
    type         TypeEnum                   @default(normal)
    created_at   DateTime                   @default(now())
    updated_at   DateTime                   @default(now())
    user         User                       @relation(fields: [created_by], references: [id])
    participants ConversationParticipants[]
    messages     Message[]
}

model ConversationParticipants {
    id             Int           @id @default(autoincrement())
    first_name     String?
    last_name      String?
    conversationId Int?
    image          String?
    about          String?       @default("")
    conversation   Conversation? @relation(fields: [conversationId], references: [id])
    userId         Int
    user           User          @relation("UserParticipant", fields: [userId], references: [id], map: "fk_user_participant")
    created_at     DateTime      @default(now())
    updated_at     DateTime      @default(now())
    role           RoleEnum      @default(member)
    created_by     Int
    creator        User          @relation("CreatedBy", fields: [created_by], references: [id], map: "fk_created_by")
    sender         Message[]     @relation("senderParticipant")
    receiver       Message[]     @relation("receiverParticipant")
}

model Message {
    id             Int                      @id @default(autoincrement())
    content        String
    senderId       Int
    receiverId     Int
    conversationId Int?
    messageType    MessageTypeEnum          @default(text)
    mediaUrl       String?
    created_at     DateTime                 @default(now())
    updated_at     DateTime                 @default(now())
    is_deleted     Boolean                  @default(false)
    sender         ConversationParticipants @relation("senderParticipant", fields: [senderId], references: [id], map: "Message_senderId_fkey")
    receiver       ConversationParticipants @relation("receiverParticipant", fields: [senderId], references: [id], map: "Message_receiverId_fkey")
    Conversation   Conversation?            @relation(fields: [conversationId], references: [id])
    MessageStatus  MessageStatus?
}

model MessageStatus {
    id         Int               @id @default(autoincrement())
    messageId  Int               @unique
    status     MessageStatusEnum // sent, delivered, read
    created_at DateTime          @default(now())
    updated_at DateTime          @default(now())
    message    Message           @relation(fields: [messageId], references: [id])
}
